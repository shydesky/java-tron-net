buildscript {
    repositories {
        maven { url 'http://mvnrepository.com' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

plugins {
    id "org.sonarqube" version "2.6"
    id 'groovy'
    id 'java'
}

group 'com.tron'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'application'
//apply plugin: 'checkstyle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "jacoco"
apply plugin: 'maven-publish'

mainClassName = 'org.tron.net.services.detection.services.NetAssitUtil'

def versions = [
        checkstyle: '8.7',
]


jacoco {
    toolVersion = "0.8.1"
}

configurations {
    checkstyleConfig

}

configurations.getByName('checkstyleConfig') {
    transitive = false
}

dependencies {
    //local libraries
    compile fileTree(dir: 'libs', include: '*.jar')
    compile fileTree(dir: '/src/main/resources')
    // end local libraries
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.13.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '1.0.0.1'

    testCompile group: 'org.testng', name: 'testng', version: '6.14.3'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    compile "org.projectlombok:lombok:1.16.18"

    compile group: 'commons-codec', name: 'commons-codec', version: '1.11'

    compile "com.madgag.spongycastle:core:1.53.0.0"
    compile "com.madgag.spongycastle:prov:1.53.0.0"

    compile group: 'com.google.guava', name: 'guava', version: '24.1-jre'

    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.4.0'

    compile "org.iq80.leveldb:leveldb:0.7"

    compile group: 'org.fusesource.leveldbjni', name: 'leveldbjni-all',
            version: '1.8'

    compile "org.apache.commons:commons-collections4:4.0"

    compile group: 'com.typesafe', name: 'config', version: '1.3.2'

    compile "com.google.code.findbugs:jsr305:3.0.0"

    compile "com.cedarsoftware:java-util:1.8.0"

    compile "org.apache.commons:commons-lang3:3.4"

    compile group: 'org.springframework', name: 'spring-context', version: '4.2.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-tx', version: '4.2.0.RELEASE'

    compile "org.apache.commons:commons-collections4:4.0"

    compile group: 'com.beust', name: 'jcommander', version: '1.72'

    compile group: 'junit', name: 'junit', version: '4.12'

    compile group: 'net.jcip', name: 'jcip-annotations', version: '1.0'

    compile group: 'org.fusesource.jansi', name: 'jansi', version: '1.16'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.44'

    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.8.5'
    compile group: 'org.apache.commons', name: 'commons-math', version: '2.2'

    compile group: 'joda-time', name: 'joda-time', version: '2.3'

    compile group: 'io.dropwizard.metrics', name: 'metrics-core', version: '3.1.2'

    checkstyleConfig "com.puppycrawl.tools:checkstyle:${versions.checkstyle}"
    // google grpc
    compile group: 'io.grpc', name: 'grpc-netty', version: '1.9.0'
    compile group: 'io.grpc', name: 'grpc-protobuf', version: '1.9.0'
    compile group: 'io.grpc', name: 'grpc-stub', version: '1.9.0'
    // end google grpc

    compile group: 'io.scalecube', name: 'scalecube-services', version: '1.0.7'
    compile group: 'io.scalecube', name: 'scalecube-cluster', version: '1.0.7'
    compile group: 'io.scalecube', name: 'scalecube-transport', version: '1.0.7'

    compile group: 'com.carrotsearch', name: 'java-sizeof', version: '0.0.5'

    compile 'org.aspectj:aspectjrt:1.8.13'
    compile 'org.aspectj:aspectjweaver:1.8.13'
    compile 'org.aspectj:aspectjtools:1.8.13'
    compile 'com.googlecode.cqengine:cqengine:2.12.4'
    compile group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'

    // http
    compile 'org.eclipse.jetty:jetty-server:9.4.11.v20180605'
    compile 'org.eclipse.jetty:jetty-servlet:9.4.11.v20180605'
    compile 'com.alibaba:fastjson:1.2.47'
    // end http
}

/*check.dependsOn 'lint'

checkstyle {
    toolVersion = "${versions.checkstyle}"
    config = resources.text.fromArchiveEntry(configurations.checkstyleConfig, 'google_checks.xml')

}*/

/*checkstyleMain {
    source = 'src/main/java'
}*/


tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

shadowJar {
    baseName = 'java-tron'
    classifier = null
    version = null
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/protos'
        }
        java {
            srcDir 'src/main/gen'
            srcDir 'src/main/java'
        }
    }

}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/"
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.9.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { outputSubDir = "gen" }
            }
        }
        all()*.plugins {
            grpc {
                outputSubDir = "gen"
            }
        }
    }
}
if (project.hasProperty("mainClass")) {
    mainClassName = mainClass
}


def binaryRelease(taskName, jarName, mainClass) {
    return tasks.create("${taskName}", Jar) {
        baseName = jarName
        version = null
        from(sourceSets.main.output) {
            include "/**"
        }

        from {
            configurations.compile.collect {
                it.isDirectory() ? it : zipTree(it)
            }
        }

        manifest {
            attributes "Main-Class": "${mainClass}"
        }
    }
}

artifacts {
    archives(binaryRelease('buildJar', 'NetAssitUtil', 'org.tron.net.services.detection.services.NetAssitUtil'))
}